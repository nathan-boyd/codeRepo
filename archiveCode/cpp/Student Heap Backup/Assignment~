Build a normalized student record system. Create a class to represent student data. You will also create classes to handle other specific types of data including dates and addresses. Your system will include all the necessary header files, cpp files, and a main program to incorporate the larger system.
Details

Imagine a university wants to keep track of the following data about each student:
First name
Last name
address line 1
address line 2
city
state
zip code
date of birth month
date of birth day
date of birth year
anticipated completion month
anticipated completion day
anticipated completion year
gpa
credit hours completed

It is obvious that we will need a student class to contain all this data. However, the principles of data design indicate that the address should be its own class, as should the date. Your program should then have at least three classes: address, date, and student. Student will have two instances of date and one of address among its data members.
Process
Build all the classes you will need for this project. Each class should have a separate header file. This file contains only the class definition. Ensure your headers use the #ifndef structure described in lecture, and include whatever other headers they need.
Build a cpp file for each class which contains the code implementation of the class. This code file will include the class header file and any other headers and libraries needed.
Build a main program that imports all the needed classes and tests them. You'll then modify this program.
Create a makefile to control the compilation process. The instructor will test the program by running the make utility, so be sure your makefile works. If you use a visual editor like code::blocks, you'll still need to create and test a makefile for your project.
The complete project

When the classes are done, create a main program which does the following:
Load up student data from a text file. All the needed information for the students should be in a text file, with each student's information on one line. You should have 50 students worth of data. NOTE: Please do not use real data. It might be helpful to write a program to generate fake data, or use the one at http://www.fakenamegenerator.com/gen-random-us-us.php
Store student data on the heap Student data will be a large array, so it should be stored on the heap. Ensure you've also removed heap data when necessary.
List all data for all students in a report format Create a method of the Student class to print a report about every student.



Create a simpler list that prints only the last and first name of each student.

Output a list of student names in alphabetical order Print the list in alphabetical order

Build a simple sort utility. We'll talk more about sorting later, but the simplest type of sort to implement may involve creating a new blank array on the heap, finding the earliest name left in the primary array, and repeating until the temporary array is full.
